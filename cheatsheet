@ --> Decorator --> A decorator is an expression that returns a function.

@Module --> A module is a class annotated with a @Module() decorator. The @Module() decorator provides metadata that
Nest makes use of to organize the application structure.

@Controller("path") --> /path --> define controller --> controller will handle client request and returnn response to
the client.

@Get(""|"subpath")--> /path/subpath --> handle get request coming from client site.

@Get('path/:id') --> /path/:id (like express)

@Get('ab*cd')--> The 'ab*cd' route path will match abcd, ab_cd, abecd, and so on. The characters ?, +, *, and () may be
used in a route path

@Put(""|"subpath")--> /path/subpath --> handle put(update) request coming from client site.

@Delete(""|"subpath")--> /path/subpath --> handle delete(delete) request coming from client site.

@Post(""|"subpath")--> /path/subpath --> handle Post(add) request coming from client site.

@HttpCode(204) --> status code

@Header('Cache-Control', 'none') --> header(req.header())

@Redirect('https://nestjs.com', 301) --> To redirect a response to a specific URL, you can either use a @Redirect() decorator or a library-specific response object (and call res.redirect())

(@Param() params) --> Routes with static paths won't work when you need to accept dynamic data as part of the request (e.g., GET /cats/1 to get cat with id 1).

@Param('id') id: string --> pass key name to get from params object ({id} = param)


Asynchronicity#
We love modern JavaScript and we know that data extraction is mostly asynchronous. That's why Nest supports and works well with async functions.

@Get()
async findAll(): Promise<any[]> {
  return [];
}


@Get()
findAll(): Observable<any[]> {
  return of([]);
}

@Body() -- req.body

@Body() createCatDto: Type

@Res() res: Response -->